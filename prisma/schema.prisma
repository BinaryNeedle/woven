generator client {
  provider = "prisma-client-js"
}

generator comments {
  provider = "prisma-db-comments-generator"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model conversation {
  conversation_id     Int                   @id @default(autoincrement())
  name                String?               @db.VarChar
  is_group            Boolean?              @default(false)
  created_at          DateTime?             @default(now()) @db.Timestamp(6)
  conversation_member conversation_member[]
  message             message[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model conversation_member {
  conversation_member_id Int          @id @default(autoincrement())
  conversation_id        Int
  user_id                Int
  role_id                Int          @default(3)
  joined_at              DateTime?    @default(now()) @db.Timestamp(6)
  conversation           conversation @relation(fields: [conversation_id], references: [conversation_id], onDelete: NoAction, onUpdate: NoAction)
  role                   role         @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
  user                   user         @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([conversation_id, user_id], map: "conversation_member_conversation_id_user_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model message {
  message_id      Int             @id @default(autoincrement())
  conversation_id Int
  user_id         Int
  content         String
  status          message_status? @default(pending)
  sent_at         DateTime?       @default(now()) @db.Timestamp(6)
  conversation    conversation    @relation(fields: [conversation_id], references: [conversation_id], onDelete: NoAction, onUpdate: NoAction)
  user            user            @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([conversation_id, sent_at])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model role {
  role_id             Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar
  description         String?
  conversation_member conversation_member[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  user_id                                         Int                   @id @default(autoincrement())
  username                                        String                @unique @db.VarChar
  email                                           String                @unique @db.VarChar
  nickname                                        String?               @db.VarChar
  biography                                       String?
  avatar_url                                      String?               @db.VarChar
  last_seen                                       DateTime?             @db.Timestamp(6)
  is_online                                       Boolean?              @default(false)
  created_at                                      DateTime?             @default(now()) @db.Timestamp(6)
  updated_at                                      DateTime?             @default(now()) @db.Timestamp(6)
  conversation_member                             conversation_member[]
  message                                         message[]
  user_contact_user_contact_contact_user_idTouser user_contact[]        @relation("user_contact_contact_user_idTouser")
  user_contact_user_contact_owner_user_idTouser   user_contact[]        @relation("user_contact_owner_user_idTouser")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_contact {
  user_contact_id                         Int       @id @default(autoincrement())
  owner_user_id                           Int
  contact_user_id                         Int
  alias                                   String    @db.VarChar
  created_at                              DateTime? @default(now()) @db.Timestamp(6)
  updated_at                              DateTime? @default(now()) @db.Timestamp(6)
  user_user_contact_contact_user_idTouser user      @relation("user_contact_contact_user_idTouser", fields: [contact_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  user_user_contact_owner_user_idTouser   user      @relation("user_contact_owner_user_idTouser", fields: [owner_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([owner_user_id, contact_user_id], map: "user_contact_owner_user_id_contact_user_id_idx")
}

enum message_status {
  pending
  delivered
  read
}
